// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: game_movement.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameMoveService_ValidateMove_FullMethodName  = "/gamemovement.GameMoveService/ValidateMove"
	GameMoveService_ExecuteMove_FullMethodName   = "/gamemovement.GameMoveService/ExecuteMove"
	GameMoveService_GetValidMoves_FullMethodName = "/gamemovement.GameMoveService/GetValidMoves"
)

// GameMoveServiceClient is the client API for GameMoveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameMoveServiceClient interface {
	ValidateMove(ctx context.Context, in *ValidateMoveRequest, opts ...grpc.CallOption) (*ValidateMoveResponse, error)
	ExecuteMove(ctx context.Context, in *ExecuteMoveRequest, opts ...grpc.CallOption) (*ExecuteMoveResponse, error)
	GetValidMoves(ctx context.Context, in *GetValidMovesRequest, opts ...grpc.CallOption) (*GetValidMovesResponse, error)
}

type gameMoveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameMoveServiceClient(cc grpc.ClientConnInterface) GameMoveServiceClient {
	return &gameMoveServiceClient{cc}
}

func (c *gameMoveServiceClient) ValidateMove(ctx context.Context, in *ValidateMoveRequest, opts ...grpc.CallOption) (*ValidateMoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMoveResponse)
	err := c.cc.Invoke(ctx, GameMoveService_ValidateMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMoveServiceClient) ExecuteMove(ctx context.Context, in *ExecuteMoveRequest, opts ...grpc.CallOption) (*ExecuteMoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteMoveResponse)
	err := c.cc.Invoke(ctx, GameMoveService_ExecuteMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMoveServiceClient) GetValidMoves(ctx context.Context, in *GetValidMovesRequest, opts ...grpc.CallOption) (*GetValidMovesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValidMovesResponse)
	err := c.cc.Invoke(ctx, GameMoveService_GetValidMoves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameMoveServiceServer is the server API for GameMoveService service.
// All implementations must embed UnimplementedGameMoveServiceServer
// for forward compatibility.
type GameMoveServiceServer interface {
	ValidateMove(context.Context, *ValidateMoveRequest) (*ValidateMoveResponse, error)
	ExecuteMove(context.Context, *ExecuteMoveRequest) (*ExecuteMoveResponse, error)
	GetValidMoves(context.Context, *GetValidMovesRequest) (*GetValidMovesResponse, error)
	mustEmbedUnimplementedGameMoveServiceServer()
}

// UnimplementedGameMoveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameMoveServiceServer struct{}

func (UnimplementedGameMoveServiceServer) ValidateMove(context.Context, *ValidateMoveRequest) (*ValidateMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMove not implemented")
}
func (UnimplementedGameMoveServiceServer) ExecuteMove(context.Context, *ExecuteMoveRequest) (*ExecuteMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteMove not implemented")
}
func (UnimplementedGameMoveServiceServer) GetValidMoves(context.Context, *GetValidMovesRequest) (*GetValidMovesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMoves not implemented")
}
func (UnimplementedGameMoveServiceServer) mustEmbedUnimplementedGameMoveServiceServer() {}
func (UnimplementedGameMoveServiceServer) testEmbeddedByValue()                         {}

// UnsafeGameMoveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameMoveServiceServer will
// result in compilation errors.
type UnsafeGameMoveServiceServer interface {
	mustEmbedUnimplementedGameMoveServiceServer()
}

func RegisterGameMoveServiceServer(s grpc.ServiceRegistrar, srv GameMoveServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameMoveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameMoveService_ServiceDesc, srv)
}

func _GameMoveService_ValidateMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMoveServiceServer).ValidateMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameMoveService_ValidateMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMoveServiceServer).ValidateMove(ctx, req.(*ValidateMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMoveService_ExecuteMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMoveServiceServer).ExecuteMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameMoveService_ExecuteMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMoveServiceServer).ExecuteMove(ctx, req.(*ExecuteMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMoveService_GetValidMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMoveServiceServer).GetValidMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameMoveService_GetValidMoves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMoveServiceServer).GetValidMoves(ctx, req.(*GetValidMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameMoveService_ServiceDesc is the grpc.ServiceDesc for GameMoveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameMoveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamemovement.GameMoveService",
	HandlerType: (*GameMoveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateMove",
			Handler:    _GameMoveService_ValidateMove_Handler,
		},
		{
			MethodName: "ExecuteMove",
			Handler:    _GameMoveService_ExecuteMove_Handler,
		},
		{
			MethodName: "GetValidMoves",
			Handler:    _GameMoveService_GetValidMoves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_movement.proto",
}
