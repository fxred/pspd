// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: game_state.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameStateServiceClient is the client API for GameStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameStateServiceClient interface {
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error)
	UpdateGameState(ctx context.Context, in *UpdateGameStateRequest, opts ...grpc.CallOption) (*UpdateGameStateResponse, error)
	RestartGame(ctx context.Context, in *RestartGameRequest, opts ...grpc.CallOption) (*RestartGameResponse, error)
}

type gameStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameStateServiceClient(cc grpc.ClientConnInterface) GameStateServiceClient {
	return &gameStateServiceClient{cc}
}

func (c *gameStateServiceClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, "/gamestate.GameStateService/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStateServiceClient) GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error) {
	out := new(GameStateResponse)
	err := c.cc.Invoke(ctx, "/gamestate.GameStateService/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStateServiceClient) UpdateGameState(ctx context.Context, in *UpdateGameStateRequest, opts ...grpc.CallOption) (*UpdateGameStateResponse, error) {
	out := new(UpdateGameStateResponse)
	err := c.cc.Invoke(ctx, "/gamestate.GameStateService/UpdateGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStateServiceClient) RestartGame(ctx context.Context, in *RestartGameRequest, opts ...grpc.CallOption) (*RestartGameResponse, error) {
	out := new(RestartGameResponse)
	err := c.cc.Invoke(ctx, "/gamestate.GameStateService/RestartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameStateServiceServer is the server API for GameStateService service.
// All implementations must embed UnimplementedGameStateServiceServer
// for forward compatibility
type GameStateServiceServer interface {
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	GetGameState(context.Context, *GetGameStateRequest) (*GameStateResponse, error)
	UpdateGameState(context.Context, *UpdateGameStateRequest) (*UpdateGameStateResponse, error)
	RestartGame(context.Context, *RestartGameRequest) (*RestartGameResponse, error)
	mustEmbedUnimplementedGameStateServiceServer()
}

// UnimplementedGameStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameStateServiceServer struct {
}

func (UnimplementedGameStateServiceServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGameStateServiceServer) GetGameState(context.Context, *GetGameStateRequest) (*GameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedGameStateServiceServer) UpdateGameState(context.Context, *UpdateGameStateRequest) (*UpdateGameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameState not implemented")
}
func (UnimplementedGameStateServiceServer) RestartGame(context.Context, *RestartGameRequest) (*RestartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartGame not implemented")
}
func (UnimplementedGameStateServiceServer) mustEmbedUnimplementedGameStateServiceServer() {}

// UnsafeGameStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameStateServiceServer will
// result in compilation errors.
type UnsafeGameStateServiceServer interface {
	mustEmbedUnimplementedGameStateServiceServer()
}

func RegisterGameStateServiceServer(s grpc.ServiceRegistrar, srv GameStateServiceServer) {
	s.RegisterService(&GameStateService_ServiceDesc, srv)
}

func _GameStateService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStateServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamestate.GameStateService/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStateServiceServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStateService_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStateServiceServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamestate.GameStateService/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStateServiceServer).GetGameState(ctx, req.(*GetGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStateService_UpdateGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStateServiceServer).UpdateGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamestate.GameStateService/UpdateGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStateServiceServer).UpdateGameState(ctx, req.(*UpdateGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStateService_RestartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStateServiceServer).RestartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamestate.GameStateService/RestartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStateServiceServer).RestartGame(ctx, req.(*RestartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameStateService_ServiceDesc is the grpc.ServiceDesc for GameStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamestate.GameStateService",
	HandlerType: (*GameStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _GameStateService_JoinGame_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _GameStateService_GetGameState_Handler,
		},
		{
			MethodName: "UpdateGameState",
			Handler:    _GameStateService_UpdateGameState_Handler,
		},
		{
			MethodName: "RestartGame",
			Handler:    _GameStateService_RestartGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_state.proto",
}
